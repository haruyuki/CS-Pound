from library import parse_time


class TestClass:
    def test_one_digit_single_times(self):
        assert parse_time('1s') == (1, 0, 0, 0, 1)
        assert parse_time('2s') == (2, 0, 0, 0, 2)
        assert parse_time('1m') == (60, 0, 0, 1, 0)
        assert parse_time('2m') == (120, 0, 0, 2, 0)
        assert parse_time('1h') == (3600, 0, 1, 0, 0)
        assert parse_time('2h') == (7200, 0, 2, 0, 0)
        assert parse_time('1d') == (86400, 1, 0, 0, 0)
        assert parse_time('2d') == (172800, 2, 0, 0, 0)

    def test_one_digit_double_times(self):
        assert parse_time('1m1s') == (61, 0, 0, 1, 1)
        assert parse_time('1m2s') == (62, 0, 0, 1, 2)
        assert parse_time('2m1s') == (121, 0, 0, 2, 1)
        assert parse_time('2m2s') == (122, 0, 0, 2, 2)
        assert parse_time('1h1s') == (3601, 0, 1, 0, 1)
        assert parse_time('1h2s') == (3602, 0, 1, 0, 2)
        assert parse_time('1h1m') == (3660, 0, 1, 1, 0)
        assert parse_time('1h2m') == (3720, 0, 1, 2, 0)
        assert parse_time('2h1s') == (7201, 0, 2, 0, 1)
        assert parse_time('2h2s') == (7202, 0, 2, 0, 2)
        assert parse_time('2h1m') == (7260, 0, 2, 1, 0)
        assert parse_time('2h2m') == (7320, 0, 2, 2, 0)
        assert parse_time('1d1s') == (86401, 1, 0, 0, 1)
        assert parse_time('1d2s') == (86402, 1, 0, 0, 2)
        assert parse_time('1d1m') == (86460, 1, 0, 1, 0)
        assert parse_time('1d2m') == (86520, 1, 0, 2, 0)
        assert parse_time('1d1h') == (90000, 1, 1, 0, 0)
        assert parse_time('1d2h') == (93600, 1, 2, 0, 0)
        assert parse_time('2d1s') == (172801, 2, 0, 0, 1)
        assert parse_time('2d2s') == (172802, 2, 0, 0, 2)
        assert parse_time('2d1m') == (172860, 2, 0, 1, 0)
        assert parse_time('2d2m') == (172920, 2, 0, 2, 0)
        assert parse_time('2d1h') == (176400, 2, 1, 0, 0)
        assert parse_time('2d2h') == (180000, 2, 2, 0, 0)

    def test_one_digit_triple_times(self):
        assert parse_time('1h1m1s') == (3661, 0, 1, 1, 1)
        assert parse_time('1h1m2s') == (3662, 0, 1, 1, 2)
        assert parse_time('1h2m1s') == (3721, 0, 1, 2, 1)
        assert parse_time('1h2m2s') == (3722, 0, 1, 2, 2)
        assert parse_time('2h1m1s') == (7261, 0, 2, 1, 1)
        assert parse_time('2h1m2s') == (7262, 0, 2, 1, 2)
        assert parse_time('2h2m1s') == (7321, 0, 2, 2, 1)
        assert parse_time('2h2m2s') == (7322, 0, 2, 2, 2)
        assert parse_time('1d1m1s') == (86461, 1, 0, 1, 1)
        assert parse_time('1d1m2s') == (86462, 1, 0, 1, 2)
        assert parse_time('1d2m1s') == (86521, 1, 0, 2, 1)
        assert parse_time('1d2m2s') == (86522, 1, 0, 2, 2)
        assert parse_time('1d1h1s') == (90001, 1, 1, 0, 1)
        assert parse_time('1d1h2s') == (90002, 1, 1, 0, 2)
        assert parse_time('1d1h1m') == (90060, 1, 1, 1, 0)
        assert parse_time('1d1h2m') == (90120, 1, 1, 2, 0)
        assert parse_time('1d2h1s') == (93601, 1, 2, 0, 1)
        assert parse_time('1d2h2s') == (93602, 1, 2, 0, 2)
        assert parse_time('1d2h1m') == (93660, 1, 2, 1, 0)
        assert parse_time('1d2h2m') == (93720, 1, 2, 2, 0)
        assert parse_time('2d1m1s') == (172861, 2, 0, 1, 1)
        assert parse_time('2d1m2s') == (172862, 2, 0, 1, 2)
        assert parse_time('2d2m1s') == (172921, 2, 0, 2, 1)
        assert parse_time('2d2m2s') == (172922, 2, 0, 2, 2)
        assert parse_time('2d1h1s') == (176401, 2, 1, 0, 1)
        assert parse_time('2d1h2s') == (176402, 2, 1, 0, 2)
        assert parse_time('2d1h1m') == (176460, 2, 1, 1, 0)
        assert parse_time('2d1h2m') == (176520, 2, 1, 2, 0)
        assert parse_time('2d2h1s') == (180001, 2, 2, 0, 1)
        assert parse_time('2d2h2s') == (180002, 2, 2, 0, 2)
        assert parse_time('2d2h1m') == (180060, 2, 2, 1, 0)
        assert parse_time('2d2h2m') == (180120, 2, 2, 2, 0)

    def test_one_digit_quad_times(self):
        assert parse_time('1d1h1m1s') == (90061, 1, 1, 1, 1)
        assert parse_time('1d1h1m2s') == (90062, 1, 1, 1, 2)
        assert parse_time('1d1h2m1s') == (90121, 1, 1, 2, 1)
        assert parse_time('1d1h2m2s') == (90122, 1, 1, 2, 2)
        assert parse_time('1d2h1m1s') == (93661, 1, 2, 1, 1)
        assert parse_time('1d2h1m2s') == (93662, 1, 2, 1, 2)
        assert parse_time('1d2h2m1s') == (93721, 1, 2, 2, 1)
        assert parse_time('1d2h2m2s') == (93722, 1, 2, 2, 2)
        assert parse_time('2d1h1m1s') == (176461, 2, 1, 1, 1)
        assert parse_time('2d1h1m2s') == (176462, 2, 1, 1, 2)
        assert parse_time('2d1h2m1s') == (176521, 2, 1, 2, 1)
        assert parse_time('2d1h2m2s') == (176522, 2, 1, 2, 2)
        assert parse_time('2d2h1m1s') == (180061, 2, 2, 1, 1)
        assert parse_time('2d2h1m2s') == (180062, 2, 2, 1, 2)
        assert parse_time('2d2h2m1s') == (180121, 2, 2, 2, 1)
        assert parse_time('2d2h2m2s') == (180122, 2, 2, 2, 2)

    def test_two_digit_times(self):
        assert parse_time('10s') == (10, 0, 0, 0, 10)
        assert parse_time('20s') == (20, 0, 0, 0, 20)
        assert parse_time('10m') == (600, 0, 0, 10, 0)
        assert parse_time('20m') == (1200, 0, 0, 20, 0)
        assert parse_time('10h') == (36000, 0, 10, 0, 0)
        assert parse_time('20h') == (72000, 0, 20, 0, 0)
        assert parse_time('10d') == (864000, 10, 0, 0, 0)
        assert parse_time('20d') == (1728000, 20, 0, 0, 0)

    def test_three_digit_times(self):
        assert parse_time('100s') == (100, 0, 0, 0, 100)
        assert parse_time('200s') == (200, 0, 0, 0, 200)
        assert parse_time('100m') == (6000, 0, 0, 100, 0)
        assert parse_time('200m') == (12000, 0, 0, 200, 0)
        assert parse_time('100h') == (360000, 0, 100, 0, 0)
        assert parse_time('200h') == (720000, 0, 200, 0, 0)
        assert parse_time('100d') == (8640000, 100, 0, 0, 0)
        assert parse_time('200d') == (17280000, 200, 0, 0, 0)

    def test_no_letter_single_times(self):
        assert parse_time('1') == (60, 0, 0, 1, 0)
        assert parse_time('2') == (120, 0, 0, 2, 0)

    def test_no_letter_double_times(self):
        assert parse_time('10') == (600, 0, 0, 10, 0)
        assert parse_time('20') == (1200, 0, 0, 20, 0)

    def test_no_letter_triple_times(self):
        assert parse_time('100') == (6000, 0, 0, 100, 0)
        assert parse_time('200') == (12000, 0, 0, 200, 0)

    def test_empty_times(self):
        assert parse_time('0s') == (0, 0, 0, 0, 0)
        assert parse_time('0m') == (0, 0, 0, 0, 0)
        assert parse_time('0h') == (0, 0, 0, 0, 0)
